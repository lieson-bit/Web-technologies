// –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let n = parseInt(prompt("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (n):"));
let m = parseInt(prompt("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ (m):"));

if (isNaN(n) || isNaN(m) || n <= 0 || m <= 0) {
    alert("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.");
} else {
    let matrix = [];

    // –®–∞–≥ 2: –°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –≤–≤–æ–¥–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    let choice = prompt("–í–≤–µ–¥–∏—Ç–µ '1', —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é, –∏–ª–∏ '2', —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏:");

    if (choice === "1") {
        // –í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é
        for (let i = 0; i < n; i++) {
            let row = prompt(`–í–≤–µ–¥–∏—Ç–µ ${m} —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${i + 1}:`).split(" ").map(Number);
            while (row.length !== m || row.some(isNaN)) {
                row = prompt(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –í–≤–µ–¥–∏—Ç–µ ${m} —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏:`).split(" ").map(Number);
            }
            matrix.push(row);
        }
    } else {
        // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ –æ—Ç -10 –¥–æ 10
        for (let i = 0; i < n; i++) {
            let row = Array.from({ length: m }, () => Math.floor(Math.random() * 21) - 10);
            matrix.push(row);
        }
    }

    // –®–∞–≥ 3: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let originalMatrixText = "\nüìå **–ò—Å—Ö–æ–¥–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:**\n" +
        matrix.map(row => row.map(num => num.toString().padStart(4)).join(" ")).join("\n");

    // –®–∞–≥ 4: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å –±–æ–ª–µ–µ —á–µ–º 3 –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
    let filteredMatrix = matrix.filter(row => row.filter(num => num < 0).length <= 3);

    // –®–∞–≥ 5: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let filteredMatrixText = filteredMatrix.length
        ? "\nüìå **–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ (—É–¥–∞–ª–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ —Å –±–æ–ª–µ–µ —á–µ–º 3 –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏):**\n" +
          filteredMatrix.map(row => row.map(num => num.toString().padStart(4)).join(" ")).join("\n")
        : "‚ùå –ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å—Ç—Ä–æ–∫.";

    // –®–∞–≥ 6: –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–æ–ª–µ –≤—ã–≤–æ–¥–∞
    document.getElementById('myrezult').value = `${originalMatrixText}\n\n${filteredMatrixText}`;
}





let canvas = document.getElementById("drawingCanvas");
let ctx = canvas.getContext("2d");

// Draw the outer blue-edged rectangle
ctx.strokeStyle = "darkblue";
ctx.lineWidth = 4;
ctx.strokeRect(30, 30, 320, 320); // Adjusted size for more space around the grid

// Function to draw an individual square with thicker dark blue borders and spacing
function drawSquare(x, y, color) {
    ctx.fillStyle = color;
    ctx.fillRect(x, y, 40, 40); // Smaller squares (40x40)
    ctx.strokeStyle = "darkblue"; // Dark blue for the border
    ctx.lineWidth = 4; // Thicker border
    ctx.strokeRect(x, y, 40, 40); // Draw square border
}

// Loop to draw the 5x5 grid with larger spaces between squares
for (let row = 0; row < 5; row++) {
    for (let col = 0; col < 5; col++) {
        let x = 50 + col * 60; // Increased spacing between columns
        let y = 50 + row * 60; // Increased spacing between rows
        let color = col < 3 ? "blue" : "yellow"; // Choose color based on column
        drawSquare(x, y, color);
    }
}

